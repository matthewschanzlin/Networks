#!/usr/bin/env python3
import socket
import sys
import ssl
import os

# ./3700ftp mkdir ftp://3700.network

# Variables
USER = 'schanzlinma'
PASS = 'EyCJUj2riohmMaGsTKwp'
DOMAIN = '3700.network'
HOSTNAME = DOMAIN
PORT = 21
args = sys.argv

command = ''
arg1 = ''
arg2 = ''

class FTPClient():
    def __init__(self, username, password, domain, port):
        self.user = username
        self.password = password
        self.domain = domain
        self.port = port
        self.packet_size = 8192
        self.control_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.data_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    def format_message(self, command, arg):
        message = '{} {}\r\n'.format(command, arg).encode()
        return message

    def receive(self):
        response = self.control_socket.recv(self.packet_size).decode()
        print(response)

    def connect_control_channel(self):
        self.control_socket.connect((self.domain, self.port))
        self.receive()

    def login(self):
        username_message = self.format_message('USER', self.user)
        password_message = self.format_message('PASS', self.password)
        self.control_socket.send(username_message)
        self.receive()
        self.control_socket.send(password_message)
        self.receive()

    def set_type(self):
        type_message = self.format_message('TYPE', 'I')
        self.control_socket.send(type_message)
        self.receive()

    def set_mode(self):
        stream_message = self.format_message('MODE', 'S')
        file_oriented_message = self.format_message('STRU', 'F')
        self.control_socket.send(stream_message)
        self.receive()
        self.control_socket.send(file_oriented_message)
        self.receive()

    def connect_data_socket(self):
        open_data_message = self.format_message('PASV', '')
        self.control_socket.send(open_data_message)
        response = self.control_socket.recv(self.packet_size).decode()

        data_channel = response.split('(')[1].split(')')[0].replace(',', '.')
        data_pieces = data_channel.split('.')
        port = (int(data_pieces[4]) << 8) + int(data_pieces[5])
        ip = '.'.join(data_pieces[0:4])
        self.data_socket.connect((ip, port))

    def quit(self):
        quit_message = self.format_message('QUIT', '')
        self.control_socket.send(quit_message)
        self.receive()
        self.control_socket.close()

    def list(self, path):
        self.connect_data_socket()
        list_message = self.format_message('LIST', path)
        self.control_socket.send(list_message)
        self.receive()
        response = self.data_socket.recv(self.packet_size).decode()
        self.receive()
        print(response)

    def make_dir(self, path):
        make_dir_message = self.format_message('MKD', path)
        self.control_socket.send(make_dir_message)
        self.receive()

    def delete(self, is_file, del_path):
        delete_message = ''

        print('PATH ', path)
        if is_file:
            delete_message = self.format_message('DELE', del_path)
        else:
            delete_message = self.format_message('RMD', del_path)
        self.control_socket.send(delete_message)
        self.receive()

    def is_ftp_url(self, path):
        return 'ftp://' in path

    def download_file(self, remote, local, delete_after_copy):
        self.connect_data_socket()
        download_message = self.format_message('RETR', remote)
        self.control_socket.send(download_message)
        self.receive()

        f = open(local, 'wb')
        data = self.data_socket.recv(1024)
        while data:
            f.write(data)
            data = self.data_socket.recv(1024)
        f.close()

        if delete_after_copy:
            self.delete(True, remote)

        self.data_socket.close()

    def upload_file(self, remote, local, delete_after_copy):
        self.connect_data_socket()
        upload_message = self.format_message('STOR', remote)
        self.control_socket.send(upload_message)
        self.receive()

        f = open(local, 'rb')
        data = f.read(1024)
        while (data):
            self.data_socket.send(data)
            data = f.read(1024)

        if delete_after_copy:
            os.remove(local)

        self.data_socket.close()

if __name__ == '__main__':
    # Arg logic
    if len(args) < 3 or len(args) > 4:
        print('EXAMPLE USAGE: \n $ ./3700ftp <command> <args1 <args2>>')
    else:
        username = 'anonymous'
        password = ''
        host = ''
        path = ''
        port = 21
        for i in range(1, len(args)):
            if i == 1:
                command = args[i].upper()
            elif i == 2:
                arg1 = args[i]
            elif i == 3:
                arg2 = args[i]

        pieces = None
        arg1
        if 'ftp://' in arg1:
            host = arg1.replace('ftp://', '')
            if '/' in host:
                host = host.split('/')[0]
                path = host.replace(host, '')
            else:
                path = '/'
            if '@' in arg1:
                pieces = arg1.replace('ftp://', '').split('@')
                username = pieces[0]
                hostpath = pieces[1]
                host = hostpath.split('/')[0]
                path = hostpath.replace(host, '')
            if ':' in username:
                password = username.split(':')[1]
                username = username.split(':')[0]
        elif 'ftp://' in arg2:
            host = arg1.replace('ftp://', '')
            if '/' in host:
                host = host.split('/')[0]
                path = host.replace(host, '')
            else:
                path = '/'
            if '@' in arg2:
                pieces = arg2.replace('ftp://', '').split('@')
                username = pieces[0]
                hostpath = pieces[1]
                host = hostpath.split('/')[0]
                path = hostpath.replace(host, '')
            if ':' in username:
                password = username.split(':')[1]
                username = username.split(':')[0]

        if ':' in host:
            port = int(host.split(':')[1])
            host = host.split(':')[0]

        ftp_url = False
        if 'ftp://' in arg1:
            arg1 = path
            ftp_url = True
        elif 'ftp://' in arg2:
            arg2 = path

        ftp_client = FTPClient(username, password, host, port)
        ftp_client.connect_control_channel()
        ftp_client.login()
        ftp_client.set_type()
        ftp_client.set_mode()

        if command == 'LS':
            ftp_client.list(arg1)
        elif command == 'RM':
            ftp_client.delete(True, arg1)
        elif command == 'RMDIR':
            ftp_client.delete(False, arg1)
        elif command == 'MKDIR':
            ftp_client.make_dir(arg1)
        elif command == 'CP' or command == 'MV':
            move = command == 'MV'
            if ftp_url:
                ftp_client.download_file(arg1, arg2, move)
            else:
                ftp_client.upload_file(arg2, arg1, move)

        ftp_client.quit()
