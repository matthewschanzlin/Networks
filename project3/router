#!/usr/bin/env python3
""" Skeleton Implementation of Project 2 for NEU CS3700"""

import argparse, socket, time, json, select, struct, math, ipaddress
from ipaddress import IPv4Network
from routerUtils import RouterUtils

parser = argparse.ArgumentParser(description='route packets')
parser.add_argument('asn', type=int, help="AS Number")
parser.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
args = parser.parse_args()


##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"

##########################################################################################

class Router:
    """ Your Router """

    def __init__(self, networks):
        self.routes = {}
        self.updates = {}
        self.relations = {}
        self.sockets = {}
        self.forwardingInfo = {}

        for relationship in networks:
            network, relation = relationship.split("-")
            self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
            self.sockets[network].setblocking(0)
            self.sockets[network].connect(network)
            self.relations[network] = relation

    def forward(self, srcif, packet):
        relation = lambda route: self.relations[srcif] == CUST or self.relations[route[1]] == CUST
        ipmatch = lambda route: ipaddress.ip_address(packet['dst']) in ipaddress.ip_network(route[0])
        ports = list(filter(lambda route: ipmatch(route) and relation(route), self.routes.items()))
        longest = 0
        best = None
        for port in ports:
            if int(port[0].split('/')[1]) > longest:
                longest = int(port[0].split('/')[1])
                best = port[1]
        if longest > 0:
            self.sock_send(self.sockets[best], packet)
        else:
            no_route = {'src': '.'.join(srcif.split('.')[:-1] + ['1']), 'dst': packet['src'], 'type': 'no route', 'msg': {}}
            self.sock_send(self.sockets[srcif], no_route)
        return False

    def coalesce(self):
        matching_info = None
        forwardingItems = self.forwardingInfo.items()
        for forwardingItem in forwardingItems:
            coalescablePairs = list(map(lambda item: (forwardingItem, item), list(filter(lambda item: RouterUtils.coalescableAddresses(forwardingItem[0], item[0]), forwardingItems))))
            for pair in coalescablePairs:
                for message in pair[0][1]:
                    sameAttributeMessages = list(filter(lambda m: RouterUtils.info_matching((message, m)), pair[1][1]))
                    if len(sameAttributeMessages) > 0:
                        matching_info = (pair[0][0], pair[1][0])
        if matching_info:
            RouterUtils.handleCoalesce(matching_info, self.routes, self.forwardingInfo)
            self.coalesce()
        return False

    def updateHelper(self, packet):
        updatedRoute = RouterUtils.configureNetmask(packet[MESG][NTWK], packet[MESG][NMSK])
        if (self.routes.get(updatedRoute) == None):
            self.routes[updatedRoute] = packet['src']
        elif (RouterUtils.chooseNextPath(packet, self.forwardingInfo[updatedRoute][0])):
            self.routes[updatedRoute] = packet['src']
        RouterUtils.handleUpdate(updatedRoute, packet, self.routes, self.forwardingInfo)

    def update(self, srcif, packet):
        self.updates[srcif] = [packet] if srcif not in self.updates else self.updates[srcif] + [packet]
        updatedRoute = RouterUtils.configureNetmask(packet['msg']['network'], packet['msg']['netmask'])

        self.updateHelper(packet)
        packet['msg']['ASPath'] = packet['msg']['ASPath'] + [args.asn]
        RouterUtils.specialForward(srcif, packet, UPDT, self.sockets, self.relations)

        self.coalesce()
        return False


    def revoke(self, srcif, packet):
        self.routes = {}
        self.forwardingInfo = {}

        for i in range(len(packet["msg"])):
            network = packet["msg"][i]["network"]
            netmask = packet["msg"][i]["netmask"]

            toDelete = []

            for j in range(len(self.updates[srcif])):
                if (self.updates[srcif][j]["msg"]["network"] == network) and (self.updates[srcif][j]["msg"]["netmask"] == netmask):
                    toDelete.append(j)

            for k in range(len(toDelete)):
                self.updates[srcif].pop(toDelete[k])


        for key in self.updates:
            for val in self.updates[key]:
                self.updateHelper(val)
                self.coalesce()

        RouterUtils.specialForward(srcif, packet, RVKE, self.sockets, self.relations)
        return True

    def build_forwarding_table(self, forwardingInfo):
        forwardingTable = []
        for key in forwardingInfo:
            for item in forwardingInfo[key]:
                forwardingTable.append({'network': key.split('/')[0], 'netmask': item['msg']['netmask'], 'peer': item['src']})
        return forwardingTable

    def dump(self, srcif, packet):
        forwardingTable = self.build_forwarding_table(self.forwardingInfo)
        msg = {'src': packet['dst'], 'dst': packet['src'], 'type': 'table', 'msg': forwardingTable}
        self.sock_send(self.sockets[srcif], msg)
        return True

    def handle_packet(self, srcif, packet):
        if packet['type'] == DATA:
            self.forward(srcif, packet)
        elif packet['type'] == DUMP:
            self.dump(srcif, packet)
        elif packet['type'] == UPDT:
            self.update(srcif, packet)
        elif packet['type'] == RVKE:
            self.revoke(srcif, packet)
        else:
            return False
        return True

    def sock_send(self, sock, msg):
        sock.send(json.dumps(msg).encode('ASCII'))

    def send_error(self, conn, msg):
        self.sock_send(conn, msg)
        return

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                try:
                    k = conn.recv(65535)
                except:
                    return
                if k:
                    for sock in self.sockets:
                        if self.sockets[sock] == conn:
                            srcif = sock
                    msg = json.loads(k)
                    if not self.handle_packet(srcif, msg):
                        self.send_error(conn, msg)
                else:
                    return
        return

if __name__ == "__main__":
    router = Router(args.networks)
    router.run()
