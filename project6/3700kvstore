#!/usr/bin/env python3

import sys, socket, select, time, json, random

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

last = 0
term = 0
state = 'follower'
global curr_leader
curr_leader = 'FFFF'

global curr_time
curr_time = time.time()

data = {}
transaction_log = []

voted = False


timeout = (random.randint(150, 300))/1000

def make_candidate():
	global term, votes, curr_time, state
	votes = 1
	term += 1
	curr_time = time.time()
	state = 'candidate'

def make_follower(leader_id):
	global curr_time, state, curr_leader, voted
	curr_time = time.time()
	state = 'follower'
	curr_leader = leader_id
	voted = False

def make_leader():
	global curr_leader, state, curr_time, last
	state = 'leader'
	curr_leader = my_id
	curr_time = time.time()
	last = curr_time - .11

while True:
	ready = select.select([sock], [], [], 0.1)[0]

	if sock in ready:

		if state == 'candidate':
			print("In candidate loop " + my_id + " cur " + curr_leader)

			if (time.time() > curr_time + timeout):
				make_candidate()


			for r in replica_ids:
				leader_msg = {
					'src': my_id,
					'dst': r,
					'leader': my_id,
					'type': 'vote',
					'term': term
				}
				sock.send(bytes(json.dumps(leader_msg), 'ascii'))

			msg_raw = sock.recv(32768)

			if len(msg_raw) == 0: continue
			msg = json.loads(msg_raw)

			if msg['type'] == 'ok':
				votes += 1
				print(str(votes) + " for " + my_id)
				if votes > len(replica_ids)/2:
					print(my_id + " is now leader")
					make_leader()


			if msg['type'] == 'append':
				if int(msg['term']) >= term:
					make_follower(msg['src'])

			if msg['type'] in ['get', 'put']:
				pass


		if state == 'follower':
			print("In follower loop " + my_id + " cur " + curr_leader)
			msg_raw = sock.recv(32768)


			if len(msg_raw) == 0: continue
			msg = json.loads(msg_raw)

			if time.time() > curr_time + timeout:
				make_candidate()

			if msg['type'] in ['get', 'put']:
				if msg['type'] == 'get':
					print(msg)
					response = {
						'src': my_id,
						'dst': msg['src'],
						'leader': curr_leader,
						'type': 'redirect',
						'MID': msg['MID']
					}
					sock.send(bytes(json.dumps(response), 'ascii'))
				elif msg['type'] == 'put':
					print(msg)
					response = {
						'src': my_id,
						'dst': msg['src'],
						'leader': curr_leader,
						'type': 'redirect',
						'MID': msg['MID']
					}
					sock.send(bytes(json.dumps(response), 'ascii'))
			elif msg['type'] == 'append':
				if int(msg['term']) >= term:
					curr_time = time.time()
					curr_leader = msg['leader']
					term = int(msg['term'])
					voted = False
			elif msg['type'] == 'vote' and int(msg['term']) >= term and not voted:
				curr_leader = 'FFFF'
				response = {
					'src': my_id,
					'dst': msg['src'],
					'leader': curr_leader,
					'type': 'ok',
				}
				sock.send(bytes(json.dumps(response), 'ascii'))
				voted = True
				print("voted")



		if state == 'leader':
			print("In leader statement " + my_id + " cur " + curr_leader)
			curr_time = time.time()
			if curr_time - last > .1:
				for r in replica_ids:
					print("Sending heartbeat " + my_id)
					msg = {
						'src': my_id,
						'dst': r,
						'leader': my_id,
						'type': 'append',
						'term': term
					}
					sock.send(bytes(json.dumps(response), 'ascii'))
					last = curr_time

			msg_raw = sock.recv(32768)

			if len(msg_raw) == 0: continue
			msg = json.loads(msg_raw)

			if msg['type'] == 'append':
				if int(msg['term']) > term:
					print("change of leader " + my_id + " " + msg['src'])
					curr_leader = msg['src']
					state = 'follower'
			elif msg['type'] == 'get':
				print(msg)
				if msg['key'] in data:
					response = {
						'src': my_id,
						'dst': msg['src'],
						'leader': my_id,
						'type': 'ok',
						'MID': msg['MID'],
						'value': data[msg['key']]
					}
					sock.send(bytes(json.dumps(response), 'ascii'))
					last = time.time()
			elif msg['type'] == 'put':
				print(msg)
				data[msg['key']] = msg['value']
				mapping = (msg['key'], msg['value'])
				temp_dict = {term: mapping}
				transaction_log.append(temp_dict)
				response = {
						'src': my_id,
						'dst': msg['src'],
						'leader': my_id,
						'type': 'ok',
						'MID': msg['MID'],
					}
				sock.send(bytes(json.dumps(response), 'ascii'))
				last = time.time()
